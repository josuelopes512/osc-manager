datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  image         String?
  emailVerified Boolean?  @default(false)
  blocked       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt()
  deletedAt     DateTime?

  @@map("users")
}

model SocialPlatform {
  id   Int    @id @default(autoincrement())
  name String @unique

  oscSocials OSCSocial[]

  @@map("social_platforms")
}

model OSCSocial {
  id               Int    @id @default(autoincrement())
  oscId            Int
  socialPlatformId Int
  link             String

  osc            OSC            @relation("OSCToOSCSocial", fields: [oscId], references: [id], onDelete: Cascade)
  socialPlatform SocialPlatform @relation(fields: [socialPlatformId], references: [id], onDelete: Cascade)

  @@map("osc_socials")
}

model OSC {
  id         Int         @id @default(autoincrement())
  name       String
  location   String?     @default("")
  oscSocials OSCSocial[] @relation("OSCToOSCSocial")
  students   Student[]

  @@map("oscs")
}

model Student {
  id            Int    @id @default(autoincrement())
  name          String
  courseId      Int
  semester      String // Format like "2017.1", "2017.2", etc.
  matriculation String @unique
  oscId         Int?

  course Course @relation(fields: [courseId], references: [id])
  osc    OSC?   @relation(fields: [oscId], references: [id])

  @@map("students")
}

model Course {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]

  @@map("courses")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
