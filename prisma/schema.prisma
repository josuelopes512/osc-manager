datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  image         String?
  emailVerified Boolean   @default(false)
  approved      Boolean   @default(false)
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model SocialPlatform {
  id   Int    @id @default(autoincrement())
  name String @unique

  oscSocials OSCSocial[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("social_platforms")
}

model OSCSocial {
  id               Int    @id @default(autoincrement())
  oscId            Int
  socialPlatformId Int?
  link             String

  osc            OSC             @relation("OSCToOSCSocial", fields: [oscId], references: [id], onDelete: Cascade)
  socialPlatform SocialPlatform? @relation(fields: [socialPlatformId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("osc_socials")
}

model OSCAddress {
  id           Int    @id @default(autoincrement())
  zipCode      String
  street       String
  number       String
  neighborhood String
  city         String
  state        String

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()
  deletedAt DateTime?
  OSC       OSC[]
}

model OSC {
  id       Int    @id @default(autoincrement())
  name     String
  location String @default("")

  oscSocials OSCSocial[] @relation("OSCToOSCSocial")
  projects   Project[]
  OSCAddress OSCAddress[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@index([name])
  @@map("oscs")
}

model Student {
  id            Int     @id @default(autoincrement())
  name          String
  matriculation String?  @unique
  email         String?
  whatsapp      String?
  courseId      Int?
  projectId     Int?

  course  Course?  @relation(fields: [courseId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@index([name])
  @@map("students")
}

model Semester {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects Project[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("semesters")
}

model Course {
  id   Int    @id @default(autoincrement())
  name String @unique

  students Student[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@index([name])
  @@map("courses")
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  link        String?
  oscId       Int
  semesterId  Int?

  osc      OSC       @relation(fields: [oscId], references: [id])
  semester Semester? @relation(fields: [semesterId], references: [id])
  students Student[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@index([name])
  @@map("projects")
}

model Survey {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  questions     Question[]
  surveyAnswers SurveyAnswer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("surveys")
}

enum QuestionType {
  MULTIPLE_CHOICE
  CHECK_BOX
  SHORT_ANSWER
}

model Question {
  id       Int          @id @default(autoincrement())
  name     String
  order    Int          @default(0)
  required Boolean      @default(false)
  type     QuestionType

  multipleChoice MultipleChoice[]
  checkBox       CheckBox[]

  surveyId Int
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  surveyResponse SurveyResponse[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("questions")
}

model MultipleChoice {
  id     Int     @id @default(autoincrement())
  choice String
  other  String?
  order  Int     @default(0)

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  deletedAt DateTime?
}

model CheckBox {
  id      Int     @id @default(autoincrement())
  option  String
  other   String?
  order   Int     @default(0)

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  deletedAt DateTime?
}

model SurveyAnswer {
  id Int @id @default(autoincrement())

  surveyId Int
  survey   Survey @relation(fields: [surveyId], references: [id])

  responses SurveyResponse[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  deletedAt DateTime?

  @@map("survey_answers")
}

model SurveyResponse {
  id Int @id @default(autoincrement())

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  answer String
  other  String?

  surveyAnswer   SurveyAnswer? @relation(fields: [surveyAnswerId], references: [id], onDelete: Cascade)
  surveyAnswerId Int?

  deletedAt DateTime?
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  deletedAt DateTime?
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  deletedAt DateTime?
  @@unique([identifier, token])
  @@map("verificationtokens")
}
