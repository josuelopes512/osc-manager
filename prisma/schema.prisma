datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  image         String?
  emailVerified Boolean?  @default(false)
  approved      Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt()
  deletedAt DateTime?

  @@map("users")
}

model SocialPlatform {
  id   Int    @id @default(autoincrement())
  name String @unique

  oscSocials OSCSocial[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("social_platforms")
}

model OSCSocial {
  id               Int    @id @default(autoincrement())
  oscId            Int
  socialPlatformId Int
  link             String

  osc            OSC            @relation("OSCToOSCSocial", fields: [oscId], references: [id], onDelete: Cascade)
  socialPlatform SocialPlatform @relation(fields: [socialPlatformId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("osc_socials")
}

model OSC {
  id       Int     @id @default(autoincrement())
  name     String
  location String? @default("")

  oscSocials OSCSocial[] @relation("OSCToOSCSocial")
  project    Project[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("oscs")
}

model Student {
  id            Int     @id @default(autoincrement())
  name          String
  matriculation String?
  email         String?
  whatsapp      String?
  courseId      Int
  oscId         Int?
  projectId     Int?

  course  Course   @relation(fields: [courseId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("students")
}

model Semester {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects Project[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("semesters")
}

model Course {
  id   Int    @id @default(autoincrement())
  name String

  students Student[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("courses")
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  link        String?
  oscId       Int
  semesterId  Int

  osc      OSC       @relation(fields: [oscId], references: [id])
  semester Semester  @relation(fields: [semesterId], references: [id])
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("projects")
}

model Survey {
  id   Int    @id @default(autoincrement())
  name String
  description String?

  questions Question[]
  surveyAnswers SurveyAnswer[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  @@map("surveys")
}

enum QuestionType {
  MultipleChoice
  CheckBox
  ShortAnswer
}

model Question {
  id             Int             @id @default(autoincrement())
  name           String
  order          Int @default(0)
  required       Boolean @default(false)
  type           QuestionType

  multipleChoice MultipleChoice[]
  checkBox       CheckBox[]

  surveyId       Int
  survey         Survey          @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  
  surveyAnswer   SurveyAnswer[]

  createdAt      DateTime        @default(now())
  updateAt       DateTime        @updatedAt()
  
  @@map("questions")
}

model MultipleChoice {
  id       Int      @id @default(autoincrement())
  choice  String 
  other   String?
  order          Int @default(0)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

model CheckBox {
  id       Int      @id @default(autoincrement())
  option  String // Array of options
  other    String?
  order          Int @default(0)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

model SurveyAnswer {
  id         Int        @id @default(autoincrement())

  surveyId   Int
  survey     Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  questionId Int
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answer     String     // This can store the answer in a serialized format, or you can use separate fields for each type
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()

  @@map("survey_answers")
}


model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
